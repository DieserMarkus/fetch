org: diesermarkus
app: serverless-fetch-app
service: serverless-fetch-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  
  # Added due to
  # Deprecation warning: Starting with next major version, API Gateway naming will be changed from "{stage}-{service}" to "{service}-{stage}".
  apiGateway:
    shouldStartNameWithService: true

  # Hardcoded due to
  # Deprecation warning: Cannot parameterize "stage, region" please use plaintext or pass arguments via command line options.
  stage: 'dev'
  region: 'eu-west-1'

  tracing:
    lambda: true
    apiGateway: true

  # REFACTOR
  # This should be redesigned into one dynamodb table (re: single table principle for dynamodb).
  # Could be like this:
  # PK            | SK 
  # USER#userid   | USER#userid     | User metadata
  # USER#userid   | EVENT#eventid   | Users and the events they have access to (including reader/owner)
  # EVENT#eventid | EVENT#eventid   | Event metadata
  # EVENT#eventid | ITEM#itemid     | Events and the items that belong to it (including date added etc)
  # ITEM#itemid   | ITEM#itemid     | Item metadata

  environment:
    # All info will be stored in Dynamo DB, see Resources/DynamoDB section below
    # Items: The items that should be brought to an event. Each item belongs to one event and has one owner/creator.
    ITEMS_TABLE: Items-${self:provider.stage}
    ITEMS_INDEX: Items-Index
    # Events: The events that require items. Each event has one owner/creator, but can have multiple contributors/readers. 
    EVENTS_TABLE: Events-${self:provider.stage}
    EVENTS_INDEX: Events-Index
    # User-Events-Relation: The users with their respective events.
    USER_EVENTS_TABLE: User-Events-${self:provider.stage}
    USER_EVENTS_INDEX: User-Events-Index
    # S3: The bucket where item and event attachments (images) are stored.
    ATTACHMENT_S3_BUCKET: serverless-fetch-app-s3-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

functions:
  - ${file(serverless-items.yml)}
  - ${file(serverless-events.yml)}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
          - AttributeName: eventId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ITEMS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ITEMS_INDEX}
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
              - AttributeName: itemId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EVENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EVENTS_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: eventId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    UserEventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: eventId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_EVENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_EVENTS_INDEX}
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
       
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: BucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket